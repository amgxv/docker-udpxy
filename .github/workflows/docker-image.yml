name: Build udpxy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: amgxv/udpxy
  UDPXY_VERSION: "1.0-25.1"
  
jobs:
  docker:
    strategy:
      matrix:
        arch:
          - amd64
          - arm64v8
          - arm32v7  
    runs-on: ubuntu-latest    
    steps:
    - name: Checkout
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.REGISTRY_TOKEN }}
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ matrix.arch }}-${{ env.UDPXY_VERSION }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: "ARCH=${{ matrix.arch }}"
  docker-manifest:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Publish manifests
        env:
          MANIFEST_NAME: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          docker manifest create ${{ env.MANIFEST_NAME }} \
            ${{ env.REGISTRY }}/${{ github.repository }}:amd64-${{ env.UDPXY_VERSION }} \
            ${{ env.REGISTRY }}/${{ github.repository }}:arm64v8-${{ env.UDPXY_VERSION }} \
            ${{ env.REGISTRY }}/${{ github.repository }}:arm32v7-${{ env.UDPXY_VERSION }}
          docker manifest push -p ${{ env.MANIFEST_NAME }}

